/*
  1、字符串扩展
*/

字符的 Unicode 表示法
codePointAt()
String.fromCodePoint()
字符串的遍历器接口
at()
normalize()
includes(), startsWith(), endsWith()
repeat()
padStart()，padEnd()
模板字符串
实例：模板编译
标签模板
String.raw()
模板字符串的限制

一、Unicode 表示法
//    \u0067
      JavaScript 允许采用\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点

      但是，这种表示法只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。

      ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。

      \u20887 >  通过Unicode  会解析为 \u2088+7  同  写入大括号内  可以解析出来  \u{20887} 这种写法可以解析出来。

      上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。

      有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符

二、codePointAt方法的参数

  codePointAt方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“?a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“?”，返回了它的十进制码点 134071（即十六进制的20BB7）。在第二个字符（即“?”的后两个字节）和第三个字符“a”上，codePointAt方法的结果与charCodeAt方法相同。

  总之，codePointAt方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与charCodeAt方法相同。

  codePointAt方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下。


三、String.fromCodePoint() § ?


    ES5 提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别 32 位的 UTF-16 字符（Unicode 编号大于0xFFFF）。

    String.fromCodePoint()   提供的方法可以解析 长度大于  Unicode  的字符串。

    ES6 提供了String.fromCodePoint方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode方法的不足。在作用上，正好与codePointAt方法相反。

    String.fromCodePoint(0x20BB7)
    // "?"
    String.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\uD83D\uDE80y'
    // true


四、includes(), startsWith(), endsWith()

  传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。
  includes()：返回布尔值，表示是否找到了参数字符串。
  startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
  endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部


五、repeat() § ?
  repeat方法返回一个新字符串，表示将原字符串重复n次。

六、padStart()，padEnd()
  ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。

  'x'.padStart(5, 'ab') // '（abab 头部补全内容）+x'
  'x'.padStart(4, 'ab') // 'abax'

  'x'.padEnd(5, 'ab') // 'x+(abab 尾部补全内容)'
  'x'.padEnd(4, 'ab') // 'xaba'
  上面代码中，padStart和padEnd一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。

七、模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。

    let title='头部';
        let container='身体';
        let str=`<div>
                <h1>${title}</h1>
                <p>${container}</p>
        </div>`;
        console.log(str);

        模板字符串可以调用函数。

        function fn() {
          return "Hello World";
        }

        `foo ${fn()} bar`
        // foo Hello World bar
    由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。

     msg=`hello ${'world'}`  >  输出  Hello world

    模板字符串支持嵌套。